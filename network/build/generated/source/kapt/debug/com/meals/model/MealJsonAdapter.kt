// Code generated by moshi-kotlin-codegen. Do not edit.
package com.meals.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class MealJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Meal>() {
  private val options: JsonReader.Options = JsonReader.Options.of("idMeal", "strMeal",
      "strMealThumb", "strInstructions", "strCategory")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  @Volatile
  private var constructorRef: Constructor<Meal>? = null

  override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Meal").append(')') }

  override fun fromJson(reader: JsonReader): Meal {
    var id: Long? = 0L
    var name: String? = null
    var thumbnail: String? = null
    var instruction: String? = null
    var category: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "idMeal", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "strMeal",
              reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          thumbnail = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("thumbnail",
              "strMealThumb", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          instruction = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("instruction",
              "strInstructions", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          category = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("category",
              "strCategory", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<Meal> = this.constructorRef ?:
        Meal::class.java.getDeclaredConstructor(Long::class.javaPrimitiveType, String::class.java,
        String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        id,
        name,
        thumbnail,
        instruction,
        category,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: Meal?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("idMeal")
    longAdapter.toJson(writer, value.id)
    writer.name("strMeal")
    stringAdapter.toJson(writer, value.name)
    writer.name("strMealThumb")
    stringAdapter.toJson(writer, value.thumbnail)
    writer.name("strInstructions")
    stringAdapter.toJson(writer, value.instruction)
    writer.name("strCategory")
    stringAdapter.toJson(writer, value.category)
    writer.endObject()
  }
}
