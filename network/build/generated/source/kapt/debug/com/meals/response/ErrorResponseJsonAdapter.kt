// Code generated by moshi-kotlin-codegen. Do not edit.
package com.meals.response

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class ErrorResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ErrorResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("message", "documentation_url")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "message")

  @Volatile
  private var constructorRef: Constructor<ErrorResponse>? = null

  override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("ErrorResponse").append(')') }

  override fun fromJson(reader: JsonReader): ErrorResponse {
    var message: String? = null
    var url: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          message = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("message",
              "message", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("url",
              "documentation_url", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<ErrorResponse> = this.constructorRef ?:
        ErrorResponse::class.java.getDeclaredConstructor(String::class.java, String::class.java,
        Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef =
        it }
    return localConstructor.newInstance(
        message,
        url,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: ErrorResponse?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("message")
    stringAdapter.toJson(writer, value.message)
    writer.name("documentation_url")
    stringAdapter.toJson(writer, value.url)
    writer.endObject()
  }
}
